/* 
    lib name: video generator from images on window scroll,
    developed by: vishal rathour,
    version: 0.0.2
*/
function videoMaker(e) {
	let t = e.live_url || "",
		a = e.desktop || {},
		n = e.mobile || {},
		r = e.containerID || "#canvasPlay",
		i = e.canvasID || "canvas",
		o = e.responsiveStart || 767,
		c = null,
		s = null,
		l = [],
		d = e.imagePreLoader || "#image_pre_loader",
		g = null,
		u = 0,
		m = 0,
		render = e.render || null,
		f = {
			buildCanvas: function() {
				let e = document.querySelector(i);
				e && (c = e, s = e.getContext("2d"))
			},
			createImageData: function(e, a, n, r, i) {
				l = [];
				for (let o = n; o <= r; o++) {
					let c = `${t}${e}/${a} (${o})`;
					l.push(c)
				}
			},
			getElement: function(e) {
				return document.querySelector(e)
			},
			createImage: function(e, t, a) {
				let n = document.createElement("div");
				n.style.height = a + "px", n.setAttribute("image_src", e), n.className = "image-get-container", t.appendChild(n)
			},
			loadImage: async function(e, t) {
				return new Promise((a, n) => {
					t.onload = () => {
						a(t)
					}, t.onerror = n, t.src = e
				})
			},
			createPreImage: async function() {
				u = 0, m = 0, f.removeNodes(d);
				let e = document.querySelector(d);
				l.forEach(function(t, a) {
					let n = document.createElement("img"),
						r = t + ".jpg";
					n.src = r, e.appendChild(n), u = a + 1;
					f.loadImage(r, n).then(function() {
						0 === m && f.event('start'), 
						m += 1, 
						console.log("image processing..."), 
						u === m && f.event('end')
						
					})
					
				})
			},
			settelCanvasImage: function(e) {
				let t = new Image;
				t.addEventListener("load", function() {
					s.clearRect(0, 0, t.width, t.height), s.canvas.width = t.width, s.canvas.height = t.height, s.drawImage(t, 0, 0, t.width, t.height)
				}, !1), t.src = e
			},
			removeNodes: function(e) {
				let t = document.querySelector(e);
				t && (t.innerHTML = "")
			},
			createImageElements: function(e) {
				let t = f.getElement(r);
				f.removeNodes(r), l.forEach(function(a) {
					f.createImage(a + ".jpg", t, e)
				})
			},
			observData: function() {
				let e = document.querySelectorAll(".image-get-container");
				if ("IntersectionObserver" in window) {
					var t = function(e) {
							e.forEach(function(e) {
								if (e.isIntersecting) {
									let t = e.target.getAttribute("image_src");
									f.settelCanvasImage(t)
								}
							})
						},
						a = new IntersectionObserver(t, {
							root: null,
							threshold: .2,
							rootMargin: "0px"
						});
					e.forEach(function(e) {
						a.observe(e)
					})
				} else console.log("IntersectionObserver not support")
			},
			getWidth: function() {
				return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth
			},
			setDataItems: async function(e, a) {
				let {
					folderName: n,
					image_Prefix: r,
					startPos: i,
					endPos: o,
					animationGap: c
				} = e, s = 0;
				s = void 0 === i ? 1 : i, void 0 != n && void 0 != r ? (f.createImageData(n, r, s, o, c), f.createImageElements(void 0 === c || 0 === c ? 60 : c), f.observData(), await f.createPreImage(), f.settelCanvasImage(`${t}${n}/${r} (${s}).jpg`)) : console.error("please set image path and images prefix. -", a)
			},
			setImageParentClass: function() {
				let e = document.querySelector(d);
				e && e.classList.add("pre-image-loader-data-mapping")
			},
			refresh: async function() {
				f.setImageParentClass();
				f.getWidth() <= o ? await f.setDataItems(n, "Mobile") : await f.setDataItems(a, "Desktop")
			},
			createEvent: async function(e) {
				g = new CustomEvent("render_video", {
					detail: {
						status: e
					},
					bubbles: !0
				}), document.dispatchEvent(g)
			},
			init: function() {
				f.buildCanvas(), f.refresh();
				let e = document.querySelector(d);
				e && (e.style.display = "none")
			},
			event:function(_data){
				render.call(f,{'status':_data});
			}
		};
	return f
}